<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>刨根问底 Kubernetes -- CNI （四）Sriov</title>
      <link href="/2022/11/22/%E5%88%A8%E6%A0%B9%E9%97%AE%E5%BA%95-Kubernetes-CNI-%EF%BC%88%E4%B8%89%EF%BC%89Multus-CNI%20copy/"/>
      <url>/2022/11/22/%E5%88%A8%E6%A0%B9%E9%97%AE%E5%BA%95-Kubernetes-CNI-%EF%BC%88%E4%B8%89%EF%BC%89Multus-CNI%20copy/</url>
      
        <content type="html"><![CDATA[<h1 id="sriov-概述">Sriov 概述</h1><p>Kubernetes 的 POD 默认不支持多网卡设置，我们通过 Multus CNI 来为 Pod建立多网络接口。</p><h1 id="multus-使用">Multus 使用</h1><p>Multus 安装很简单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/intel/multus-cni.git &amp;&amp; <span class="built_in">cd</span> multus-cni</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> ./images/multus-daemonset.yml | kubectl apply -f -</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="multus-daemonset-的作用">Multus DaemonSet 的作用</h2><ul><li><p>启动一个 Multus 守护程序集，这会在每个节点上运行一个pod，它在每个节点上放置一个 Multus 二进制文件/opt/cni/bin</p></li><li><p>读取按字典顺序（按字母顺序）的第一个配置文件/etc/cni/net.d，并在每个节点上为Multus创建一个新的配置文件/etc/cni/net.d/00-multus.conf，此配置是自动生成的，并且基于默认网络配置（假定为按字母顺序排列的第一个配置）</p></li><li><p>在每个节点上创建一个/etc/cni/net.d/multus.d目录，其中包含 Multus访问 Kubernetes API 的身份验证信息。</p></li><li><p>安装 network-attachment-definition CRD，这个 CRD 存储着其他 CNI的信息，在 Multus 看到使用此资源时，会调用设置的 CNI去配置网络。</p></li></ul><p>其中第二点，安装 Multus 会将原有的 CNI 作为代理的一部分放到自己的 CNI配置中，当 work 时，也会使用之前的 CNI 创建第一张网卡。 如图: <imgsrc="/img/multus.png" alt="cri" /></p><p>配置变化, 可以看到 原有的 CNI 配置完全存在于 Multus 的 delegates里，通过配置变化，containerd 调用 CNI 时实际调用的是 Multus 的 CNI。<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>cni<span class="regexp">/net.d/</span><span class="number">01</span>-kube-ovn.conflist </span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;kube-ovn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cniVersion&quot;</span>:<span class="string">&quot;0.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;kube-ovn&quot;</span>,</span><br><span class="line">            <span class="string">&quot;server_socket&quot;</span>:<span class="string">&quot;/run/openvswitch/kube-ovn-daemon.sock&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;portmap&quot;</span>,</span><br><span class="line">            <span class="string">&quot;capabilities&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;portMappings&quot;</span>:<span class="keyword">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>cni<span class="regexp">/net.d/</span><span class="number">00</span>-multus.conf | jq</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;capabilities&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;portMappings&quot;</span>: <span class="keyword">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;cniVersion&quot;</span>: <span class="string">&quot;0.3.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;delegates&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;cniVersion&quot;</span>: <span class="string">&quot;0.3.1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kube-ovn&quot;</span>,</span><br><span class="line">      <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;server_socket&quot;</span>: <span class="string">&quot;/run/openvswitch/kube-ovn-daemon.sock&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;kube-ovn&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;capabilities&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;portMappings&quot;</span>: <span class="keyword">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;portmap&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;logLevel&quot;</span>: <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">  <span class="string">&quot;logToStderr&quot;</span>: <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">&quot;kubeconfig&quot;</span>: <span class="string">&quot;/etc/cni/net.d/multus.d/multus.kubeconfig&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;multus-cni-network&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;multus&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="multus-的使用">Multus 的使用</h2><p>希望两个网卡都使用 kube-ovn 为 pod 创建 Network-Attachment-Definition创建 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mec-nets</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">&quot;k8s.cni.cncf.io/v1&quot;</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkAttachmentDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">attachnet1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">mec-nets</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">      &quot;cniVersion&quot;: &quot;0.3.0&quot;,</span></span><br><span class="line"><span class="string">      &quot;type&quot;: &quot;kube-ovn&quot;,</span></span><br><span class="line"><span class="string">      &quot;server_socket&quot;: &quot;/run/openvswitch/kube-ovn-daemon.sock&quot;,</span></span><br><span class="line"><span class="string">      &quot;provider&quot;: &quot;attachnet1.mec-nets.ovn&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure> 创建 Pod <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod9</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">ovn.kubernetes.io/logical_switch:</span> <span class="string">subnet-ipv4-ns-demo-100</span></span><br><span class="line">    <span class="attr">k8s.v1.cni.cncf.io/networks:</span> <span class="string">mec-nets/attachnet1</span>   <span class="comment"># 选择 NetworkAttachmentDefinition</span></span><br><span class="line">    <span class="attr">attachnet1.mec-nets.ovn.kubernetes.io/logical_switch:</span> <span class="string">subnet-ipv4-ns-demo-100</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod9</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/ash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;trap : TERM INT; sleep 36000 &amp; wait&quot;</span>]</span><br><span class="line">    <span class="attr">image:</span> <span class="string">rancher/curl</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">kubernetes.io/hostname:</span> <span class="string">eci2</span></span><br></pre></td></tr></table></figure></p><h2 id="multus-的-处理">Multus 的 处理</h2><p>符合 CNI 的标准规范，在 containerd 调用 plugin (multus 二进制)后，multus 进行处理</p><p>pkg/multus/miltus.go L557 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func <span class="built_in">CmdAdd</span>(args *skel<span class="selector-class">.CmdArgs</span>, exec invoke<span class="selector-class">.Exec</span>, kubeClient *k8s.ClientInfo) (cnitypes<span class="selector-class">.Result</span>, error) &#123;</span><br><span class="line">    n, err := types<span class="selector-class">.LoadNetConf</span>(args.StdinData)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="从-input-加载-netconf-将-cni-配置加载到-netconf.delegates">1. 从input 加载 netConf, 将 cni 配置加载到 netConf.Delegates</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">n</span>, err := types.<span class="type">LoadNetConf</span>(args.<span class="type">StdinData</span>)</span><br></pre></td></tr></table></figure><h3 id="加载委托插件delegate并将其添加至-multus-配置">2.加载委托插件（delegate）并将其添加至 multus 配置</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_, kc, err := k8s.TryLoadPodDelegates(pod, n, kubeClient, resourceMap)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, cmdErr(k8sArgs, <span class="string">&quot;error loading k8s delegates k8s args: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尝试解析-pod-注解中-multus-配置">2.1. 尝试解析 Pod 注解中 multus配置</h4><p><strong>v1.multus-cni.io/default-network</strong> 是否携带v1.multus-cni.io/default-network 键值对 pkg/k8sclient/k8sclient.go L323<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TryLoadPodDelegates</span><span class="params">(pod *v1.Pod, conf *types.NetConf, clientInfo *ClientInfo, resourceMap <span class="keyword">map</span>[<span class="type">string</span>]*types.ResourceInfo)</span></span> (<span class="type">int</span>, *ClientInfo, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">    ......</span><br><span class="line">    delegate, err := tryLoadK8sPodDefaultNetwork(clientInfo, pod, conf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="literal">nil</span>, logging.Errorf(<span class="string">&quot;TryLoadPodDelegates: error in loading K8s cluster default network from pod annotation: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> delegate != <span class="literal">nil</span> &#123;</span><br><span class="line">logging.Debugf(<span class="string">&quot;TryLoadPodDelegates: Overwrite the cluster default network with %v from pod annotations&quot;</span>, delegate)</span><br><span class="line"></span><br><span class="line">conf.Delegates[<span class="number">0</span>] = delegate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>k8s.v1.cni.cncf.io/networks</strong> 是否携带k8s.v1.cni.cncf.io/networks 键值对, 可以看到 该配置可以多个。<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">networks,</span> err := GetPodNetwork(pod)</span><br></pre></td></tr></table></figure> <code>parsePodNetworkAnnotation</code> 拆解<code>k8s.v1.cni.cncf.io/networks</code> 对应的值用于初始化<code>types.NetworkSelectionElement</code> 并追加至切片： <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPodNetwork</span><span class="params">(pod *v1.Pod)</span></span> ([]*types.NetworkSelectionElement, <span class="type">error</span>) &#123;</span><br><span class="line">logging.Debugf(<span class="string">&quot;GetPodNetwork: %v&quot;</span>, pod)</span><br><span class="line"></span><br><span class="line">netAnnot := pod.Annotations[networkAttachmentAnnot]</span><br><span class="line">defaultNamespace := pod.ObjectMeta.Namespace</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(netAnnot) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, &amp;NoK8sNetworkError&#123;<span class="string">&quot;no kubernetes network found&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">networks, err := parsePodNetworkAnnotation(netAnnot, defaultNamespace)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> networks, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>像上面示例 pod9 中 mec-nets/attachnet1, network 的 Name 是 attachnet1,Namespace 是 mec-nets, InterfaceRequest 可以命名网卡名称, 如果要 eth10则命名为 mec-nets/attachnet1@eth10</p><h4 id="获取指定的-network-attachment-definition">2.2. 获取指定的Network-attachment-definition</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> networks != <span class="literal">nil</span> &#123;</span><br><span class="line">delegates, err := GetNetworkDelegates(clientInfo, pod, networks, conf, resourceMap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*NoK8sNetworkError); ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, clientInfo, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="literal">nil</span>, logging.Errorf(<span class="string">&quot;TryLoadPodDelegates: error in getting k8s network for pod: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = conf.AddDelegates(delegates); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(delegates), clientInfo, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>getKubernetesDelegate</strong> pkg/k8sclient/k8sclient.goL254 <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getKubernetesDelegate</span><span class="params">(client *ClientInfo, net *types.NetworkSelectionElement, confdir <span class="type">string</span>, pod *v1.Pod, resourceMap <span class="keyword">map</span>[<span class="type">string</span>]*types.ResourceInfo)</span></span> (*types.DelegateNetConf, <span class="keyword">map</span>[<span class="type">string</span>]*types.ResourceInfo, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">logging.Debugf(<span class="string">&quot;getKubernetesDelegate: %v, %v, %s, %v, %v&quot;</span>, client, net, confdir, pod, resourceMap)</span><br><span class="line">customResource, err := client.NetClient.NetworkAttachmentDefinitions(net.Namespace).Get(context.TODO(), net.Name, metav1.GetOptions&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errMsg := fmt.Sprintf(<span class="string">&quot;cannot find a network-attachment-definition (%s) in namespace (%s): %v&quot;</span>, net.Name, net.Namespace, err)</span><br><span class="line"><span class="keyword">if</span> client != <span class="literal">nil</span> &#123;</span><br><span class="line">client.Eventf(pod, v1.EventTypeWarning, <span class="string">&quot;NoNetworkFound&quot;</span>, errMsg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, resourceMap, logging.Errorf(<span class="string">&quot;getKubernetesDelegate: &quot;</span> + errMsg)</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">configBytes, err := netutils.GetCNIConfig(customResource, confdir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, resourceMap, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delegate, err := types.LoadDelegateNetConf(configBytes, net, deviceID, resourceName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, resourceMap, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> delegate, resourceMap, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 解析后得到 NetworkAttachmentDefinition 的 spec字段中的配置字符串： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;cniVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.3.0&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kube-ovn&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;server_socket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/run/openvswitch/kube-ovn-daemon.sock&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;attachnet1.mec-nets.ovn&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure> 使用 该 NAD 的 CNI delegate 使用kube-ovn CNI。</p><h3 id="加载-delegate-后">3. 加载 delegate 后</h3><p>在补充完配置结构体后，遍历它的 Delegates 字段： /pkg/multus/multus.goL612 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> result, tmpResult cnitypes<span class="selector-class">.Result</span></span><br><span class="line"><span class="selector-tag">var</span> netStatus <span class="selector-attr">[]</span>nettypes<span class="selector-class">.NetworkStatus</span></span><br><span class="line"><span class="keyword">for</span> idx, delegate := range n<span class="selector-class">.Delegates</span> &#123;</span><br><span class="line">ifName := <span class="built_in">getIfname</span>(delegate, args<span class="selector-class">.IfName</span>, idx)</span><br></pre></td></tr></table></figure></p><ul><li><p>3.1 获取网卡名称 如果 <code>attachnet1/mec-nets@eth10</code>这种已配置的，会根据索引 + net 确定网卡名 <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func get<span class="constructor">Ifname(<span class="params">delegate</span> <span class="operator">*</span><span class="params">types</span>.DelegateNetConf, <span class="params">argif</span> <span class="params">string</span>, <span class="params">idx</span> <span class="params">int</span>)</span> <span class="built_in">string</span> &#123;</span><br><span class="line">logging.<span class="constructor">Debugf(<span class="string">&quot;getIfname: %v, %s, %d&quot;</span>, <span class="params">delegate</span>, <span class="params">argif</span>, <span class="params">idx</span>)</span></span><br><span class="line"><span class="keyword">if</span> delegate.IfnameRequest != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">return delegate.IfnameRequest</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> delegate.MasterPlugin &#123;</span><br><span class="line"><span class="comment">// master plugin always uses the CNI-provided interface name</span></span><br><span class="line">return argif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Otherwise construct a unique interface name from the delegate&#x27;s</span></span><br><span class="line"><span class="comment">// position in the delegate list</span></span><br><span class="line">return fmt.<span class="constructor">Sprintf(<span class="string">&quot;net%d&quot;</span>, <span class="params">idx</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>3.2 使用 DelegateAdd 为 pod 配置网络 <figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> delegate.ConfListPlugin &#123;</span><br><span class="line">result, <span class="keyword">err</span> = conflistAdd(rt, delegate.Bytes, multusNetconf, <span class="keyword">exec</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line"><span class="keyword">return</span> nil, <span class="keyword">err</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result, <span class="keyword">err</span> = confAdd(rt, delegate.Bytes, multusNetconf, <span class="keyword">exec</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line"><span class="keyword">return</span> nil, <span class="keyword">err</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">conflistAdd</span><span class="params">(rt *libcni.RuntimeConf, rawnetconflist []<span class="type">byte</span>, multusNetconf *types.NetConf, exec invoke.Exec)</span></span> (cnitypes.Result, <span class="type">error</span>) &#123;</span><br><span class="line">logging.Debugf(<span class="string">&quot;conflistAdd: %v, %s&quot;</span>, rt, <span class="type">string</span>(rawnetconflist))</span><br><span class="line"><span class="comment">// In part, adapted from K8s pkg/kubelet/dockershim/network/cni/cni.go</span></span><br><span class="line">binDirs := filepath.SplitList(os.Getenv(<span class="string">&quot;CNI_PATH&quot;</span>))</span><br><span class="line">binDirs = <span class="built_in">append</span>([]<span class="type">string</span>&#123;multusNetconf.BinDir&#125;, binDirs...)</span><br><span class="line">cniNet := libcni.NewCNIConfigWithCacheDir(binDirs, multusNetconf.CNIDir, exec)</span><br><span class="line"></span><br><span class="line">confList, err := libcni.ConfListFromBytes(rawnetconflist)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, logging.Errorf(<span class="string">&quot;conflistAdd: error converting the raw bytes into a conflist: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result, err := cniNet.AddNetworkList(context.Background(), confList, rt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">conflistAdd</span><span class="params">(rt *libcni.RuntimeConf, rawnetconflist []<span class="type">byte</span>, multusNetconf *types.NetConf, exec invoke.Exec)</span></span> (cnitypes.Result, <span class="type">error</span>) &#123;</span><br><span class="line">logging.Debugf(<span class="string">&quot;conflistAdd: %v, %s&quot;</span>, rt, <span class="type">string</span>(rawnetconflist))</span><br><span class="line"><span class="comment">// In part, adapted from K8s pkg/kubelet/dockershim/network/cni/cni.go</span></span><br><span class="line">binDirs := filepath.SplitList(os.Getenv(<span class="string">&quot;CNI_PATH&quot;</span>))</span><br><span class="line">binDirs = <span class="built_in">append</span>([]<span class="type">string</span>&#123;multusNetconf.BinDir&#125;, binDirs...)</span><br><span class="line">cniNet := libcni.NewCNIConfigWithCacheDir(binDirs, multusNetconf.CNIDir, exec)</span><br><span class="line"></span><br><span class="line">confList, err := libcni.ConfListFromBytes(rawnetconflist)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, logging.Errorf(<span class="string">&quot;conflistAdd: error converting the raw bytes into a conflist: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result, err := cniNet.AddNetworkList(context.Background(), confList, rt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>3.3 执行多次 CNI 网络插件的 ADD 操作。 如 pod9 的日志<strong>debug</strong> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conflistAdd: &amp;&#123;<span class="number">24</span>a1efa35675f1382fa12a5849c0597bf4bcb7e4c1d7764dc2b5f3701b57b11c /<span class="selector-tag">var</span>/run/netns/cni-<span class="number">3</span>b58095c-<span class="number">52</span>a9-c2c4-d9ba-ad30f44fee13 eth0 <span class="selector-attr">[[IgnoreUnknown true]</span> <span class="selector-attr">[K8S_POD_NAMESPACE default]</span> <span class="selector-attr">[K8S_POD_NAME pod9]</span> <span class="selector-attr">[K8S_POD_INFRA_CONTAINER_ID 24a1efa35675f1382fa12a5849c0597bf4bcb7e4c1d7764dc2b5f3701b57b11c]</span> <span class="selector-attr">[K8S_POD_UID 3da6f436-bb79-461e-8595-6779f972ca76]</span> <span class="selector-attr">[K8S_POD_NAMESPACE default]</span> <span class="selector-attr">[K8S_POD_NAME pod9]</span> <span class="selector-attr">[K8S_POD_INFRA_CONTAINER_ID 24a1efa35675f1382fa12a5849c0597bf4bcb7e4c1d7764dc2b5f3701b57b11c]</span> <span class="selector-attr">[K8S_POD_UID 3da6f436-bb79-461e-8595-6779f972ca76]</span> <span class="selector-attr">[IgnoreUnknown 1]</span>] map<span class="selector-attr">[]</span> &#125;, &#123;&quot;cniVersion&quot;:<span class="string">&quot;0.3.1&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;kube-ovn&quot;</span>,<span class="string">&quot;plugins&quot;</span>:[&#123;&quot;server_socket&quot;:<span class="string">&quot;/run/openvswitch/kube-ovn-daemon.sock&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;kube-ovn&quot;</span>&#125;,&#123;&quot;capabilities&quot;:&#123;&quot;portMappings&quot;:true&#125;,&quot;type&quot;:<span class="string">&quot;portmap&quot;</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">confAdd: &amp;&#123;<span class="number">24</span>a1efa35675f1382fa12a5849c0597bf4bcb7e4c1d7764dc2b5f3701b57b11c /<span class="selector-tag">var</span>/run/netns/cni-<span class="number">3</span>b58095c-<span class="number">52</span>a9-c2c4-d9ba-ad30f44fee13 net1 <span class="selector-attr">[[IgnoreUnknown true]</span> <span class="selector-attr">[K8S_POD_NAMESPACE default]</span> <span class="selector-attr">[K8S_POD_NAME pod9]</span> <span class="selector-attr">[K8S_POD_INFRA_CONTAINER_ID 24a1efa35675f1382fa12a5849c0597bf4bcb7e4c1d7764dc2b5f3701b57b11c]</span> <span class="selector-attr">[K8S_POD_UID 3da6f436-bb79-461e-8595-6779f972ca76]</span> <span class="selector-attr">[K8S_POD_NAMESPACE default]</span> <span class="selector-attr">[K8S_POD_NAME pod9]</span> <span class="selector-attr">[K8S_POD_INFRA_CONTAINER_ID 24a1efa35675f1382fa12a5849c0597bf4bcb7e4c1d7764dc2b5f3701b57b11c]</span> <span class="selector-attr">[K8S_POD_UID 3da6f436-bb79-461e-8595-6779f972ca76]</span> <span class="selector-attr">[IgnoreUnknown 1]</span>] map<span class="selector-attr">[]</span> &#125;, &#123;&quot;cniVersion&quot;:<span class="string">&quot;0.3.0&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;attachnet1&quot;</span>,<span class="string">&quot;provider&quot;</span>:<span class="string">&quot;attachnet1.mec-nets.ovn&quot;</span>,<span class="string">&quot;server_socket&quot;</span>:<span class="string">&quot;/run/openvswitch/kube-ovn-daemon.sock&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;kube-ovn&quot;</span>&#125;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> CNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kata Container 2.x 和 3.0 安装，内核编译，镜像制作</title>
      <link href="/2022/09/07/Kata-Container-2-x-%E5%92%8C-3-0-%E5%AE%89%E8%A3%85%EF%BC%8C%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%EF%BC%8C%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/"/>
      <url>/2022/09/07/Kata-Container-2-x-%E5%92%8C-3-0-%E5%AE%89%E8%A3%85%EF%BC%8C%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%EF%BC%8C%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="kata-container">kata container</h1><p><ahref="https://mp.weixin.qq.com/s?__biz=MzA3MDM1NjE0NA==&amp;mid=2247483724&amp;idx=1&amp;sn=87a1eb5dd5464145aaefa5fa34aa92f6&amp;chksm=9f3f5c93a848d585fa1a40849eb8190e93fa5a0a88d36328dca0b280f87e92a746874c20a492#rd">2.x介绍</a> <a href="https://ost.51cto.com/posts/14319">3.0 介绍</a> # 安装## 2.x 版本 Kubernetes 环境中可以使用 kata-deploy 进行安装<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/kata-containers/</span>kata-containers<span class="regexp">/main/</span>tools<span class="regexp">/packaging/</span>kata-deploy<span class="regexp">/kata-rbac/</span>base/kata-rbac.yaml</span><br><span class="line">$ kubectl apply -f https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/kata-containers/</span>kata-containers<span class="regexp">/main/</span>tools<span class="regexp">/packaging/</span>kata-deploy<span class="regexp">/kata-deploy/</span>base/kata-deploy.yaml</span><br></pre></td></tr></table></figure></p><p>创建 runtimeclass <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/kata-containers/</span>kata-containers<span class="regexp">/main/</span>tools<span class="regexp">/packaging/</span>kata-deploy<span class="regexp">/runtimeclasses/</span>kata-runtimeClasses.yaml</span><br></pre></td></tr></table></figure></p><p>在 yaml 中 spec 下添加 <code>runtimeClassName: kata-qemu</code>即可使用</p><span id="more"></span><h2 id="section">3.0</h2><p>3.0 当前只支持默认的 <code>Dragonball</code> 做为 hypervisor. ###Rust <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> <span class="variable">$HOME</span>/.cargo/env</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rustup install 1.58</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rustup default 1.58-x86_64-unknown-linux-gnu</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rustup target add x86_64-unknown-linux-musl</span></span><br></pre></td></tr></table></figure></p><h3 id="musl-libc">Musl libc</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:<span class="regexp">//gi</span>t.musl-libc.org<span class="regexp">/cgit/mu</span>sl<span class="regexp">/snapshot/mu</span>sl-<span class="number">1.2</span>.<span class="number">3</span>.tar.gz</span><br><span class="line">$ tar vxf musl-<span class="number">1.2</span>.<span class="number">3</span>.tar.gz</span><br><span class="line">$ cd musl-<span class="number">1.2</span>.<span class="number">3</span>/</span><br><span class="line">$ .<span class="regexp">/configure --prefix=/u</span>sr<span class="regexp">/local/</span></span><br><span class="line">$ make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><h3 id="编译安装">编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/kata-containers/kata-containers.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> kata-containers/src/runtime-rs</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><blockquote><p>参考 <ahref="https://github.com/kata-containers/kata-containers/blob/runtime-rs/docs/install/kata-containers-3.0-rust-runtime-installation-guide.md">rustinstall</a></p></blockquote><h3 id="创建对应-runtimeclass">创建对应 runtimeclass</h3><p>创建 yaml 并 apply <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">kind:</span> RuntimeClass</span><br><span class="line"><span class="symbol">apiVersion:</span> node.k8s.io/v1</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">    name:</span> kata</span><br><span class="line"><span class="symbol">handler:</span> kata</span><br><span class="line"><span class="symbol">scheduling:</span></span><br><span class="line"><span class="symbol">  nodeSelector:</span></span><br><span class="line">    katacontainers.io/kata-runtime: <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure> 在 yaml 中 spec 下添加<code>runtimeClassName: kata</code> 即可使用</p><p>make install 后配置文件在<code>/usr/share/defaults/kata-containers/configuration.toml</code></p><h1 id="内核编译">内核编译</h1><p>当时做 sriov 和 vhost-user 时需要内核支持，重新编译内核，加入mlx5_core 和 uio 驱动</p><blockquote><p>编译需要依赖包，yq 需要使用 pip3 安装，系统包flex，jq，bison，openssl-devel；’不同的系统 ncurses-devel orlibncurses-dev</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> kata-contaners/tools/packaging/kernel</span></span><br><span class="line"></span><br><span class="line">// 下载内核包</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./build-kernel.sh setup</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> kata-linux-5.15.26-90</span></span><br><span class="line"></span><br><span class="line">// 图形页面</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make menuconfig</span></span><br></pre></td></tr></table></figure><blockquote><p>uio_pci_geniric 在 device driver &gt; Userspace I/O drivers mellanox在 device driver &gt; network device support &gt; Ethernet driversupport &gt; Mellanox devices</p></blockquote><p><imgsrc="https://img-blog.csdnimg.cn/378db8babd704cbdbeb2479ee8391837.png"alt="驱动编译截屏" /> build kernel <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> ..</span><br><span class="line"><span class="variable">$</span>  ./<span class="built_in">build-kernel</span>.sh build</span><br></pre></td></tr></table></figure> 在kata-linux-5.15.26-90 可以看到编译好的内核文件</p><h1 id="镜像制作">镜像制作</h1><p>由于 image 需要一些额外的包进行测试使用，需要自己制作 &gt; 使用ubuntu</p><h2 id="rootfs">rootfs</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> kata-containers/tools/osbuilder</span></span><br><span class="line"></span><br><span class="line">// 将想要安装的包写入</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"> <span class="built_in">export</span> EXTRA_PKGS=<span class="string">&quot;gcc make curl gnupg coreutils apt tar kmod pkg-config libc-dev libc6-dev pciutils iproute2 bind9-utils util-linux ethtool&quot;</span></span></span><br><span class="line"></span><br><span class="line">// 也可以 USE_PODMAN=true</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make USE_DOCKER=ture  image 2&gt;&amp;1 | <span class="built_in">tee</span> logimage.txt</span></span><br></pre></td></tr></table></figure><h2 id="image">image</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> make USE_DOCKER=ture  rootfs <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">tee</span> logrootfs.txt</span><br></pre></td></tr></table></figure><p>可以看到 kata-containers.img 镜像</p>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Kata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刨根问底 Kubernetes -- CNI （三）Multus</title>
      <link href="/2022/09/07/%E5%88%A8%E6%A0%B9%E9%97%AE%E5%BA%95-Kubernetes-CNI-%EF%BC%88%E4%B8%89%EF%BC%89Multus-CNI/"/>
      <url>/2022/09/07/%E5%88%A8%E6%A0%B9%E9%97%AE%E5%BA%95-Kubernetes-CNI-%EF%BC%88%E4%B8%89%EF%BC%89Multus-CNI/</url>
      
        <content type="html"><![CDATA[<h1 id="multus-概述">Multus 概述</h1><p>Kubernetes 的 POD 默认不支持多网卡设置，我们通过 Multus CNI 来为 Pod建立多网络接口。</p><h1 id="multus-使用">Multus 使用</h1><p>Multus 安装很简单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/intel/multus-cni.git &amp;&amp; <span class="built_in">cd</span> multus-cni</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> ./images/multus-daemonset.yml | kubectl apply -f -</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="multus-daemonset-的作用">Multus DaemonSet 的作用</h2><ul><li><p>启动一个 Multus 守护程序集，这会在每个节点上运行一个pod，它在每个节点上放置一个 Multus 二进制文件/opt/cni/bin</p></li><li><p>读取按字典顺序（按字母顺序）的第一个配置文件/etc/cni/net.d，并在每个节点上为Multus创建一个新的配置文件/etc/cni/net.d/00-multus.conf，此配置是自动生成的，并且基于默认网络配置（假定为按字母顺序排列的第一个配置）</p></li><li><p>在每个节点上创建一个/etc/cni/net.d/multus.d目录，其中包含 Multus访问 Kubernetes API 的身份验证信息。</p></li><li><p>安装 network-attachment-definition CRD，这个 CRD 存储着其他 CNI的信息，在 Multus 看到使用此资源时，会调用设置的 CNI去配置网络。</p></li></ul><p>其中第二点，安装 Multus 会将原有的 CNI 作为代理的一部分放到自己的 CNI配置中，当 work 时，也会使用之前的 CNI 创建第一张网卡。 如图: <imgsrc="/img/multus.png" alt="cri" /></p><p>配置变化, 可以看到 原有的 CNI 配置完全存在于 Multus 的 delegates里，通过配置变化，containerd 调用 CNI 时实际调用的是 Multus 的 CNI。<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>cni<span class="regexp">/net.d/</span><span class="number">01</span>-kube-ovn.conflist </span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;kube-ovn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cniVersion&quot;</span>:<span class="string">&quot;0.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;kube-ovn&quot;</span>,</span><br><span class="line">            <span class="string">&quot;server_socket&quot;</span>:<span class="string">&quot;/run/openvswitch/kube-ovn-daemon.sock&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;portmap&quot;</span>,</span><br><span class="line">            <span class="string">&quot;capabilities&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;portMappings&quot;</span>:<span class="keyword">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure> <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>cni<span class="regexp">/net.d/</span><span class="number">00</span>-multus.conf | jq</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;capabilities&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;portMappings&quot;</span>: <span class="keyword">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;cniVersion&quot;</span>: <span class="string">&quot;0.3.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;delegates&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;cniVersion&quot;</span>: <span class="string">&quot;0.3.1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kube-ovn&quot;</span>,</span><br><span class="line">      <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;server_socket&quot;</span>: <span class="string">&quot;/run/openvswitch/kube-ovn-daemon.sock&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;kube-ovn&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;capabilities&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;portMappings&quot;</span>: <span class="keyword">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="string">&quot;portmap&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;logLevel&quot;</span>: <span class="string">&quot;debug&quot;</span>,</span><br><span class="line">  <span class="string">&quot;logToStderr&quot;</span>: <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">&quot;kubeconfig&quot;</span>: <span class="string">&quot;/etc/cni/net.d/multus.d/multus.kubeconfig&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;multus-cni-network&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;multus&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="multus-的使用">Multus 的使用</h2><p>希望两个网卡都使用 kube-ovn 为 pod 创建 Network-Attachment-Definition创建 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mec-nets</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">&quot;k8s.cni.cncf.io/v1&quot;</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkAttachmentDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">attachnet1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">mec-nets</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">      &quot;cniVersion&quot;: &quot;0.3.0&quot;,</span></span><br><span class="line"><span class="string">      &quot;type&quot;: &quot;kube-ovn&quot;,</span></span><br><span class="line"><span class="string">      &quot;server_socket&quot;: &quot;/run/openvswitch/kube-ovn-daemon.sock&quot;,</span></span><br><span class="line"><span class="string">      &quot;provider&quot;: &quot;attachnet1.mec-nets.ovn&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure> 创建 Pod <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod9</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">ovn.kubernetes.io/logical_switch:</span> <span class="string">subnet-ipv4-ns-demo-100</span></span><br><span class="line">    <span class="attr">k8s.v1.cni.cncf.io/networks:</span> <span class="string">mec-nets/attachnet1</span>   <span class="comment"># 选择 NetworkAttachmentDefinition</span></span><br><span class="line">    <span class="attr">attachnet1.mec-nets.ovn.kubernetes.io/logical_switch:</span> <span class="string">subnet-ipv4-ns-demo-100</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pod9</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/ash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;trap : TERM INT; sleep 36000 &amp; wait&quot;</span>]</span><br><span class="line">    <span class="attr">image:</span> <span class="string">rancher/curl</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">kubernetes.io/hostname:</span> <span class="string">eci2</span></span><br></pre></td></tr></table></figure></p><h2 id="multus-的-处理">Multus 的 处理</h2><p>符合 CNI 的标准规范，在 containerd 调用 plugin (multus 二进制)后，multus 进行处理</p><p>pkg/multus/miltus.go L557 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func <span class="built_in">CmdAdd</span>(args *skel<span class="selector-class">.CmdArgs</span>, exec invoke<span class="selector-class">.Exec</span>, kubeClient *k8s.ClientInfo) (cnitypes<span class="selector-class">.Result</span>, error) &#123;</span><br><span class="line">    n, err := types<span class="selector-class">.LoadNetConf</span>(args.StdinData)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="从-input-加载-netconf-将-cni-配置加载到-netconf.delegates">1. 从input 加载 netConf, 将 cni 配置加载到 netConf.Delegates</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">n</span>, err := types.<span class="type">LoadNetConf</span>(args.<span class="type">StdinData</span>)</span><br></pre></td></tr></table></figure><h3 id="加载委托插件delegate并将其添加至-multus-配置">2.加载委托插件（delegate）并将其添加至 multus 配置</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_, kc, err := k8s.TryLoadPodDelegates(pod, n, kubeClient, resourceMap)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, cmdErr(k8sArgs, <span class="string">&quot;error loading k8s delegates k8s args: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尝试解析-pod-注解中-multus-配置">2.1. 尝试解析 Pod 注解中 multus配置</h4><p><strong>v1.multus-cni.io/default-network</strong> 是否携带v1.multus-cni.io/default-network 键值对 pkg/k8sclient/k8sclient.go L323<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TryLoadPodDelegates</span><span class="params">(pod *v1.Pod, conf *types.NetConf, clientInfo *ClientInfo, resourceMap <span class="keyword">map</span>[<span class="type">string</span>]*types.ResourceInfo)</span></span> (<span class="type">int</span>, *ClientInfo, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">    ......</span><br><span class="line">    delegate, err := tryLoadK8sPodDefaultNetwork(clientInfo, pod, conf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="literal">nil</span>, logging.Errorf(<span class="string">&quot;TryLoadPodDelegates: error in loading K8s cluster default network from pod annotation: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> delegate != <span class="literal">nil</span> &#123;</span><br><span class="line">logging.Debugf(<span class="string">&quot;TryLoadPodDelegates: Overwrite the cluster default network with %v from pod annotations&quot;</span>, delegate)</span><br><span class="line"></span><br><span class="line">conf.Delegates[<span class="number">0</span>] = delegate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>k8s.v1.cni.cncf.io/networks</strong> 是否携带k8s.v1.cni.cncf.io/networks 键值对, 可以看到 该配置可以多个。<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">networks,</span> err := GetPodNetwork(pod)</span><br></pre></td></tr></table></figure> <code>parsePodNetworkAnnotation</code> 拆解<code>k8s.v1.cni.cncf.io/networks</code> 对应的值用于初始化<code>types.NetworkSelectionElement</code> 并追加至切片： <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPodNetwork</span><span class="params">(pod *v1.Pod)</span></span> ([]*types.NetworkSelectionElement, <span class="type">error</span>) &#123;</span><br><span class="line">logging.Debugf(<span class="string">&quot;GetPodNetwork: %v&quot;</span>, pod)</span><br><span class="line"></span><br><span class="line">netAnnot := pod.Annotations[networkAttachmentAnnot]</span><br><span class="line">defaultNamespace := pod.ObjectMeta.Namespace</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(netAnnot) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, &amp;NoK8sNetworkError&#123;<span class="string">&quot;no kubernetes network found&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">networks, err := parsePodNetworkAnnotation(netAnnot, defaultNamespace)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> networks, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>像上面示例 pod9 中 mec-nets/attachnet1, network 的 Name 是 attachnet1,Namespace 是 mec-nets, InterfaceRequest 可以命名网卡名称, 如果要 eth10则命名为 mec-nets/attachnet1@eth10</p><h4 id="获取指定的-network-attachment-definition">2.2. 获取指定的Network-attachment-definition</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> networks != <span class="literal">nil</span> &#123;</span><br><span class="line">delegates, err := GetNetworkDelegates(clientInfo, pod, networks, conf, resourceMap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*NoK8sNetworkError); ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, clientInfo, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="literal">nil</span>, logging.Errorf(<span class="string">&quot;TryLoadPodDelegates: error in getting k8s network for pod: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = conf.AddDelegates(delegates); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(delegates), clientInfo, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>getKubernetesDelegate</strong> pkg/k8sclient/k8sclient.goL254 <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getKubernetesDelegate</span><span class="params">(client *ClientInfo, net *types.NetworkSelectionElement, confdir <span class="type">string</span>, pod *v1.Pod, resourceMap <span class="keyword">map</span>[<span class="type">string</span>]*types.ResourceInfo)</span></span> (*types.DelegateNetConf, <span class="keyword">map</span>[<span class="type">string</span>]*types.ResourceInfo, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">logging.Debugf(<span class="string">&quot;getKubernetesDelegate: %v, %v, %s, %v, %v&quot;</span>, client, net, confdir, pod, resourceMap)</span><br><span class="line">customResource, err := client.NetClient.NetworkAttachmentDefinitions(net.Namespace).Get(context.TODO(), net.Name, metav1.GetOptions&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errMsg := fmt.Sprintf(<span class="string">&quot;cannot find a network-attachment-definition (%s) in namespace (%s): %v&quot;</span>, net.Name, net.Namespace, err)</span><br><span class="line"><span class="keyword">if</span> client != <span class="literal">nil</span> &#123;</span><br><span class="line">client.Eventf(pod, v1.EventTypeWarning, <span class="string">&quot;NoNetworkFound&quot;</span>, errMsg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, resourceMap, logging.Errorf(<span class="string">&quot;getKubernetesDelegate: &quot;</span> + errMsg)</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">configBytes, err := netutils.GetCNIConfig(customResource, confdir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, resourceMap, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delegate, err := types.LoadDelegateNetConf(configBytes, net, deviceID, resourceName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, resourceMap, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> delegate, resourceMap, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 解析后得到 NetworkAttachmentDefinition 的 spec字段中的配置字符串： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;cniVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.3.0&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kube-ovn&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;server_socket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/run/openvswitch/kube-ovn-daemon.sock&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;attachnet1.mec-nets.ovn&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure> 使用 该 NAD 的 CNI delegate 使用kube-ovn CNI。</p><h3 id="加载-delegate-后">3. 加载 delegate 后</h3><p>在补充完配置结构体后，遍历它的 Delegates 字段： /pkg/multus/multus.goL612 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> result, tmpResult cnitypes<span class="selector-class">.Result</span></span><br><span class="line"><span class="selector-tag">var</span> netStatus <span class="selector-attr">[]</span>nettypes<span class="selector-class">.NetworkStatus</span></span><br><span class="line"><span class="keyword">for</span> idx, delegate := range n<span class="selector-class">.Delegates</span> &#123;</span><br><span class="line">ifName := <span class="built_in">getIfname</span>(delegate, args<span class="selector-class">.IfName</span>, idx)</span><br></pre></td></tr></table></figure></p><ul><li><p>3.1 获取网卡名称 如果 <code>attachnet1/mec-nets@eth10</code>这种已配置的，会根据索引 + net 确定网卡名 <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func get<span class="constructor">Ifname(<span class="params">delegate</span> <span class="operator">*</span><span class="params">types</span>.DelegateNetConf, <span class="params">argif</span> <span class="params">string</span>, <span class="params">idx</span> <span class="params">int</span>)</span> <span class="built_in">string</span> &#123;</span><br><span class="line">logging.<span class="constructor">Debugf(<span class="string">&quot;getIfname: %v, %s, %d&quot;</span>, <span class="params">delegate</span>, <span class="params">argif</span>, <span class="params">idx</span>)</span></span><br><span class="line"><span class="keyword">if</span> delegate.IfnameRequest != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">return delegate.IfnameRequest</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> delegate.MasterPlugin &#123;</span><br><span class="line"><span class="comment">// master plugin always uses the CNI-provided interface name</span></span><br><span class="line">return argif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Otherwise construct a unique interface name from the delegate&#x27;s</span></span><br><span class="line"><span class="comment">// position in the delegate list</span></span><br><span class="line">return fmt.<span class="constructor">Sprintf(<span class="string">&quot;net%d&quot;</span>, <span class="params">idx</span>)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>3.2 使用 DelegateAdd 为 pod 配置网络 <figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> delegate.ConfListPlugin &#123;</span><br><span class="line">result, <span class="keyword">err</span> = conflistAdd(rt, delegate.Bytes, multusNetconf, <span class="keyword">exec</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line"><span class="keyword">return</span> nil, <span class="keyword">err</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result, <span class="keyword">err</span> = confAdd(rt, delegate.Bytes, multusNetconf, <span class="keyword">exec</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line"><span class="keyword">return</span> nil, <span class="keyword">err</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">conflistAdd</span><span class="params">(rt *libcni.RuntimeConf, rawnetconflist []<span class="type">byte</span>, multusNetconf *types.NetConf, exec invoke.Exec)</span></span> (cnitypes.Result, <span class="type">error</span>) &#123;</span><br><span class="line">logging.Debugf(<span class="string">&quot;conflistAdd: %v, %s&quot;</span>, rt, <span class="type">string</span>(rawnetconflist))</span><br><span class="line"><span class="comment">// In part, adapted from K8s pkg/kubelet/dockershim/network/cni/cni.go</span></span><br><span class="line">binDirs := filepath.SplitList(os.Getenv(<span class="string">&quot;CNI_PATH&quot;</span>))</span><br><span class="line">binDirs = <span class="built_in">append</span>([]<span class="type">string</span>&#123;multusNetconf.BinDir&#125;, binDirs...)</span><br><span class="line">cniNet := libcni.NewCNIConfigWithCacheDir(binDirs, multusNetconf.CNIDir, exec)</span><br><span class="line"></span><br><span class="line">confList, err := libcni.ConfListFromBytes(rawnetconflist)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, logging.Errorf(<span class="string">&quot;conflistAdd: error converting the raw bytes into a conflist: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result, err := cniNet.AddNetworkList(context.Background(), confList, rt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">conflistAdd</span><span class="params">(rt *libcni.RuntimeConf, rawnetconflist []<span class="type">byte</span>, multusNetconf *types.NetConf, exec invoke.Exec)</span></span> (cnitypes.Result, <span class="type">error</span>) &#123;</span><br><span class="line">logging.Debugf(<span class="string">&quot;conflistAdd: %v, %s&quot;</span>, rt, <span class="type">string</span>(rawnetconflist))</span><br><span class="line"><span class="comment">// In part, adapted from K8s pkg/kubelet/dockershim/network/cni/cni.go</span></span><br><span class="line">binDirs := filepath.SplitList(os.Getenv(<span class="string">&quot;CNI_PATH&quot;</span>))</span><br><span class="line">binDirs = <span class="built_in">append</span>([]<span class="type">string</span>&#123;multusNetconf.BinDir&#125;, binDirs...)</span><br><span class="line">cniNet := libcni.NewCNIConfigWithCacheDir(binDirs, multusNetconf.CNIDir, exec)</span><br><span class="line"></span><br><span class="line">confList, err := libcni.ConfListFromBytes(rawnetconflist)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, logging.Errorf(<span class="string">&quot;conflistAdd: error converting the raw bytes into a conflist: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result, err := cniNet.AddNetworkList(context.Background(), confList, rt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>3.3 执行多次 CNI 网络插件的 ADD 操作。 如 pod9 的日志<strong>debug</strong> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conflistAdd: &amp;&#123;<span class="number">24</span>a1efa35675f1382fa12a5849c0597bf4bcb7e4c1d7764dc2b5f3701b57b11c /<span class="selector-tag">var</span>/run/netns/cni-<span class="number">3</span>b58095c-<span class="number">52</span>a9-c2c4-d9ba-ad30f44fee13 eth0 <span class="selector-attr">[[IgnoreUnknown true]</span> <span class="selector-attr">[K8S_POD_NAMESPACE default]</span> <span class="selector-attr">[K8S_POD_NAME pod9]</span> <span class="selector-attr">[K8S_POD_INFRA_CONTAINER_ID 24a1efa35675f1382fa12a5849c0597bf4bcb7e4c1d7764dc2b5f3701b57b11c]</span> <span class="selector-attr">[K8S_POD_UID 3da6f436-bb79-461e-8595-6779f972ca76]</span> <span class="selector-attr">[K8S_POD_NAMESPACE default]</span> <span class="selector-attr">[K8S_POD_NAME pod9]</span> <span class="selector-attr">[K8S_POD_INFRA_CONTAINER_ID 24a1efa35675f1382fa12a5849c0597bf4bcb7e4c1d7764dc2b5f3701b57b11c]</span> <span class="selector-attr">[K8S_POD_UID 3da6f436-bb79-461e-8595-6779f972ca76]</span> <span class="selector-attr">[IgnoreUnknown 1]</span>] map<span class="selector-attr">[]</span> &#125;, &#123;&quot;cniVersion&quot;:<span class="string">&quot;0.3.1&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;kube-ovn&quot;</span>,<span class="string">&quot;plugins&quot;</span>:[&#123;&quot;server_socket&quot;:<span class="string">&quot;/run/openvswitch/kube-ovn-daemon.sock&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;kube-ovn&quot;</span>&#125;,&#123;&quot;capabilities&quot;:&#123;&quot;portMappings&quot;:true&#125;,&quot;type&quot;:<span class="string">&quot;portmap&quot;</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">confAdd: &amp;&#123;<span class="number">24</span>a1efa35675f1382fa12a5849c0597bf4bcb7e4c1d7764dc2b5f3701b57b11c /<span class="selector-tag">var</span>/run/netns/cni-<span class="number">3</span>b58095c-<span class="number">52</span>a9-c2c4-d9ba-ad30f44fee13 net1 <span class="selector-attr">[[IgnoreUnknown true]</span> <span class="selector-attr">[K8S_POD_NAMESPACE default]</span> <span class="selector-attr">[K8S_POD_NAME pod9]</span> <span class="selector-attr">[K8S_POD_INFRA_CONTAINER_ID 24a1efa35675f1382fa12a5849c0597bf4bcb7e4c1d7764dc2b5f3701b57b11c]</span> <span class="selector-attr">[K8S_POD_UID 3da6f436-bb79-461e-8595-6779f972ca76]</span> <span class="selector-attr">[K8S_POD_NAMESPACE default]</span> <span class="selector-attr">[K8S_POD_NAME pod9]</span> <span class="selector-attr">[K8S_POD_INFRA_CONTAINER_ID 24a1efa35675f1382fa12a5849c0597bf4bcb7e4c1d7764dc2b5f3701b57b11c]</span> <span class="selector-attr">[K8S_POD_UID 3da6f436-bb79-461e-8595-6779f972ca76]</span> <span class="selector-attr">[IgnoreUnknown 1]</span>] map<span class="selector-attr">[]</span> &#125;, &#123;&quot;cniVersion&quot;:<span class="string">&quot;0.3.0&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;attachnet1&quot;</span>,<span class="string">&quot;provider&quot;</span>:<span class="string">&quot;attachnet1.mec-nets.ovn&quot;</span>,<span class="string">&quot;server_socket&quot;</span>:<span class="string">&quot;/run/openvswitch/kube-ovn-daemon.sock&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;kube-ovn&quot;</span>&#125;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> CNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刨根问底 Kubernetes -- CNI （二）CNI 使用代码分析</title>
      <link href="/2022/09/07/%E5%88%A8%E6%A0%B9%E9%97%AE%E5%BA%95-Kubernetes-CNI-%EF%BC%88%E4%BA%8C%EF%BC%89CNI-%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2022/09/07/%E5%88%A8%E6%A0%B9%E9%97%AE%E5%BA%95-Kubernetes-CNI-%EF%BC%88%E4%BA%8C%EF%BC%89CNI-%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>本文通过在 kubernetes 环境中 kubelet 通过 cri （container runtimeinterface）规范使用 containerd 去调取 CNI 进行 pod 网络配置来描述</p><p>conatainerd 版本: v1.6.8 cni: kube-ovn: v1.11.0 kubernetes: v1.23.6&gt; 环境中是 kube-ovn 做为 cni，所以从 kube-ovn 的环境讲起</p><p>架构如图所示 <img src="/img/containerd_cri_architecture.png"alt="cri" /></p><p>CNI 的工作是由 kubelet 调取 containerd cri plugin开始的，下面介绍具体的代码实现</p><span id="more"></span><h1 id="containerd-代码分析">containerd 代码分析</h1><blockquote><p>kubelet 通过 grpc 调用 containerd 的 RunSanbox 方法，创建了 Pod运行的基本环境，包括 pause 容器和c ontainerd-shim。 kubelet 通过 grpc 调用containerd 的 CreateContainer 和 StartContainer 创建 Pod 中的容器，包括initContainer 和 normalContainer。</p></blockquote><p>在初始化时加载了 CNI 的配置, 默认配置从 <code>/etc/cni/net.d/</code>下读取；然后加载不同的 runtime，如果 runtime 下有指定 cni配置路径，则也会加载。 pkg/cri/server/service_linux.go <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *criService)</span></span> initPlatform() (err <span class="type">error</span>) &#123;</span><br><span class="line">    pluginDirs := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">defaultNetworkPlugin: c.config.NetworkPluginConfDir,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name, conf := <span class="keyword">range</span> c.config.Runtimes &#123;</span><br><span class="line"><span class="keyword">if</span> conf.NetworkPluginConfDir != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">pluginDirs[name] = conf.NetworkPluginConfDir</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.netPlugin = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]cni.CNI)</span><br><span class="line"><span class="keyword">for</span> name, dir := <span class="keyword">range</span> pluginDirs &#123;</span><br><span class="line">max := c.config.NetworkPluginMaxConfNum</span><br><span class="line"><span class="keyword">if</span> name != defaultNetworkPlugin &#123;</span><br><span class="line"><span class="keyword">if</span> m := c.config.Runtimes[name].NetworkPluginMaxConfNum; m != <span class="number">0</span> &#123;</span><br><span class="line">max = m</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Pod needs to attach to at least loopback network and a non host network,</span></span><br><span class="line"><span class="comment">// hence networkAttachCount is 2. If there are more network configs the</span></span><br><span class="line"><span class="comment">// pod will be attached to all the networks but we will only use the ip</span></span><br><span class="line"><span class="comment">// of the default network interface as the pod IP.</span></span><br><span class="line">i, err := cni.New(cni.WithMinNetworkCount(networkAttachCount),</span><br><span class="line">cni.WithPluginConfDir(dir),</span><br><span class="line">cni.WithPluginMaxConfNum(max),</span><br><span class="line">cni.WithPluginDir([]<span class="type">string</span>&#123;c.config.NetworkPluginBinDir&#125;))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to initialize cni: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">c.netPlugin[name] = i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RunPodSandbox 在创建 netNS 后会调用 setupPodNetwork。</p><p>pkg/cri/server/sandbox_run.go L127 <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *criService)</span></span> RunPodSandbox(ctx context.Context, r *runtime.RunPodSandboxRequest) (_ *runtime.RunPodSandboxResponse, retErr <span class="type">error</span>) &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> podNetwork &#123;</span><br><span class="line">netStart := time.Now()</span><br><span class="line"><span class="keyword">var</span> netnsMountDir = <span class="string">&quot;/var/run/netns&quot;</span></span><br><span class="line"><span class="keyword">if</span> c.config.NetNSMountsUnderStateDir &#123;</span><br><span class="line">netnsMountDir = filepath.Join(c.config.StateDir, <span class="string">&quot;netns&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 创建新的 netNS, 默认路径是在 /var/run/netns 路径下</span></span><br><span class="line">        <span class="comment">// 1. 生成 16 位随机数, 并生成 cni-xx-xx; 2. nsPath 为 /var/run/netns/cni-xx-xx;</span></span><br><span class="line">        <span class="comment">// 3. 利用 os.OpenFile 创建路径; 4. containerd 起 goroutine mount</span></span><br><span class="line">sandbox.NetNS, err = netns.NewNetNS(netnsMountDir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to create network namespace for sandbox %q: %w&quot;</span>, id, err)</span><br><span class="line">&#125;</span><br><span class="line">sandbox.NetNSPath = sandbox.NetNS.GetPath()</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> retErr != <span class="literal">nil</span> &#123;</span><br><span class="line">deferCtx, deferCancel := ctrdutil.DeferContext()</span><br><span class="line"><span class="keyword">defer</span> deferCancel()</span><br><span class="line"><span class="comment">// Teardown network if an error is returned.</span></span><br><span class="line"><span class="keyword">if</span> err := c.teardownPodNetwork(deferCtx, sandbox); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.G(ctx).WithError(err).Errorf(<span class="string">&quot;Failed to destroy network for sandbox %q&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := sandbox.NetNS.Remove(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.G(ctx).WithError(err).Errorf(<span class="string">&quot;Failed to remove network namespace %s for sandbox %q&quot;</span>, sandbox.NetNSPath, id)</span><br><span class="line">&#125;</span><br><span class="line">sandbox.NetNSPath = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// setupPodNetwork</span></span><br><span class="line"><span class="keyword">if</span> err := c.setupPodNetwork(ctx, &amp;sandbox); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to setup network for sandbox %q: %w&quot;</span>, id, err)</span><br><span class="line">&#125;</span><br><span class="line">sandboxCreateNetworkTimer.UpdateSince(netStart)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>netPlugin.Setup 最终调用 AddNetworkList CNI 插件接口为 sandbox配置网络；result 为 CNI 返回结果。 pkg/cri/server/sandbox_run.go L377<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setupPodNetwork setups up the network for a pod</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *criService)</span></span> setupPodNetwork(ctx context.Context, sandbox *sandboxstore.Sandbox) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">id        = sandbox.ID</span><br><span class="line">config    = sandbox.Config</span><br><span class="line">path      = sandbox.NetNSPath</span><br><span class="line">        <span class="comment">// runtimehandler(kata 或 空), 通常获取 default</span></span><br><span class="line">netPlugin = c.getNetworkPlugin(sandbox.RuntimeHandler)</span><br><span class="line">)</span><br><span class="line">    <span class="comment">// netPlugin</span></span><br><span class="line"><span class="keyword">if</span> netPlugin == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;cni config not initialized&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opts, err := cniNamespaceOpts(id, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;get cni namespace options: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.G(ctx).WithField(<span class="string">&quot;podsandboxid&quot;</span>, id).Debugf(<span class="string">&quot;begin cni setup&quot;</span>)</span><br><span class="line">result, err := netPlugin.Setup(ctx, id, path, opts...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">logDebugCNIResult(ctx, id, result)</span><br><span class="line"><span class="comment">// Check if the default interface has IP config</span></span><br><span class="line"><span class="keyword">if</span> configs, ok := result.Interfaces[defaultIfName]; ok &amp;&amp; <span class="built_in">len</span>(configs.IPConfigs) &gt; <span class="number">0</span> &#123;</span><br><span class="line">sandbox.IP, sandbox.AdditionalIPs = selectPodIPs(ctx, configs.IPConfigs, c.config.IPPreference)</span><br><span class="line">sandbox.CNIResult = result</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;failed to find network info for sandbox %q&quot;</span>, id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Setup 生成 环境变量，然后调用 查看 plugin 里的 type，对应运行 CNI 的二进制文件 <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CNIConfig)</span></span> addNetwork(ctx context.Context, name, cniVersion <span class="type">string</span>, net *NetworkConfig, prevResult types.Result, rt *RuntimeConf) (types.Result, <span class="type">error</span>) &#123;</span><br><span class="line">    ......</span><br><span class="line">newConf, err := buildOneConfig(name, cniVersion, net, prevResult, rt)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> invoke.ExecPluginWithResult(ctx, pluginPath, newConf.Bytes, c.args(<span class="string">&quot;ADD&quot;</span>, rt), c.exec)</span><br></pre></td></tr></table></figure> 如 kube-ovn 的 配置 <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="regexp">/etc/</span>cni<span class="regexp">/net.d/</span><span class="number">01</span>-kube-ovn.conflist </span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;kube-ovn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cniVersion&quot;</span>:<span class="string">&quot;0.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;kube-ovn&quot;</span>,</span><br><span class="line">            <span class="string">&quot;server_socket&quot;</span>:<span class="string">&quot;/run/openvswitch/kube-ovn-daemon.sock&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;portmap&quot;</span>,</span><br><span class="line">            <span class="string">&quot;capabilities&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;portMappings&quot;</span>:<span class="keyword">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> CNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刨根问底 Kubernetes -- CNI （一）CNI 目录</title>
      <link href="/2022/09/07/%E5%88%A8%E6%A0%B9%E9%97%AE%E5%BA%95-Kubernetes-CNI-%EF%BC%88%E4%B8%80%EF%BC%89CNI-%E7%9B%AE%E5%BD%95/"/>
      <url>/2022/09/07/%E5%88%A8%E6%A0%B9%E9%97%AE%E5%BA%95-Kubernetes-CNI-%EF%BC%88%E4%B8%80%EF%BC%89CNI-%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="cni-概述">CNI 概述</h1><p>The Container Network InterfaceCNI（容器网络接口）是一个云原生计算基础项目，由一个规范和库组成，用于编写用于在Linux 容器中配置网络接口的插件，以及许多受支持的插件。CNI只专注于容器的网络连接，并在删除容器时删除分配的资源。由于这种专注，CNI得到了广泛的支持，并且规范易于实现。</p><p>除了规范之外，CNI 仓库还包含用于将 CNI 集成到应用程序中的库的 Go源代码，以及用于执行 CNI插件的示例命令行工具。一个单独的仓库包含参考插件和用于创建新插件的模板。</p><p>模板代码可以直接为现有的容器网络项目创建 CNI 插件。CNI也为从头开始创建新的容器网络项目提供了一个良好的框架。</p><ul><li><a href="https://github.com/containernetworking/plugins">CNIplugin</a></li><li><a href="https://github.com/containernetworking/cni">CNI</a></li></ul><p>在网络插件和容器执行之间定义一个公共接口是谨慎的：所以提出了此规范。</p><span id="more"></span><h1 id="cni-简介">CNI 简介</h1><p><a href="https://juejin.cn/post/6986495816949039141">CNI 简介</a></p><p>关于 CNI 比较重要的几点如下： - 符合 CNI标准的插件必须是二进制文件（可执行文件），并不是守护进程。运行时要有root 权限 - 网络定义或配置以 json文件形式存储。这些文件通过标准输入方式（stdin）传给二进制插件 -当容器创建时，相关信息以环境变量的方式传递给插件。但是对于最新的CNI，也可以以 json信息通过标准输入的方式发送 - CNI 二进制插件目前只允许以上两种方式的输入 - 对于 CNI插件，容器就是linux的网络名命空间</p><figure><img src="/img/cni2.png" alt="cni2" /><figcaption aria-hidden="true">cni2</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> CloudNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> CNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OVN 简介</title>
      <link href="/2022/08/29/OVN-%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/08/29/OVN-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="ovn-介绍">OVN 介绍</h1><p>Open vSwitch（OVS）是一款开源的“虚拟交换机”，控制协议方面它不但支持OpenFlow 的所有特性而且扩展了部分 OpenFlow 的功能；Overlay协议方面它支持 GRE, VXLAN, STT, Geneve 四种主流Overlay 数据包。OVS已经是数据平面的事实标准了。</p><span id="more"></span><p>但是长期一来 OVS 都缺乏一个统一的网络模型（Neutron虽然花费巨大力气实现一个网络模型但是仅仅适用于 OpenStack而无法用于容器更加无法单独使用），于是在2015年 OVS社区宣布了一个子项目——Open Virtual Network（OVN）。它旨在为 OVS提供一个控制平面，通过一个统一的网络模型为容器、虚拟机提供相同的网络服务。</p><p>OVN 提供的是一个轻量级控制器，提供了比 openvSwitch更高层的抽象，与逻辑路由器和逻辑交换机而不是 flow一起工作；这个轻量级不但体现在 OVN 本身的代码少（只有几个 C语言文件，而且代码很少），模型简单（虽然简单但是很丰富，更懂得利用 OVS本身的特性）而且它的流表设计（Pipeline）也容易理解。</p><p>OVN 是一系列守护程序，它们将虚拟网络配置转换为 OpenFlow，并将其安装到openvSwitch 中；</p><p><strong>OVN 的功能</strong> - L2功能，分布式逻辑交换机 -L3功能，分布式逻辑交换机 - ACL，访问控制列表 - DHCP，DNS -NAT，SNAT、DNAT都支持 - LoadBalancer，支持面向内部的负载均衡和提供外部访问的负载均衡</p><h1 id="ovn的架构">OVN的架构</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">                                  CMS</span><br><span class="line">                                   |<span class="string"></span></span><br><span class="line"><span class="string">                                   </span>|</span><br><span class="line">                       +-----------|<span class="string">-----------+</span></span><br><span class="line"><span class="string">                       </span>|<span class="string">           </span>|<span class="string">           </span>|</span><br><span class="line">                       |<span class="string">     OVN/CMS Plugin    </span>|</span><br><span class="line">                       |<span class="string">           </span>|<span class="string">           </span>|</span><br><span class="line">                       |<span class="string">           </span>|<span class="string">           </span>|</span><br><span class="line">                       |<span class="string">   OVN Northbound DB   </span>|</span><br><span class="line">                       |<span class="string">           </span>|<span class="string">           </span>|</span><br><span class="line">                       |<span class="string">           </span>|<span class="string">           </span>|</span><br><span class="line">                       |<span class="string">       ovn-northd      </span>|</span><br><span class="line">                       |<span class="string">           </span>|<span class="string">           </span>|</span><br><span class="line">                       +-----------|<span class="string">-----------+</span></span><br><span class="line"><span class="string">                                   </span>|</span><br><span class="line">                                   |<span class="string"></span></span><br><span class="line"><span class="string">                         +-------------------+</span></span><br><span class="line"><span class="string">                         </span>|<span class="string"> OVN Southbound DB </span>|</span><br><span class="line">                         +-------------------+</span><br><span class="line">                                   |<span class="string"></span></span><br><span class="line"><span class="string">                                   </span>|</span><br><span class="line">                +------------------+------------------+</span><br><span class="line">                |<span class="string">                  </span>|<span class="string">                  </span>|</span><br><span class="line">  HV 1          |<span class="string">                  </span>|<span class="string">    HV n          </span>|</span><br><span class="line">+---------------|<span class="string">---------------+  .  +---------------</span>|<span class="string">---------------+</span></span><br><span class="line"><span class="string"></span>|<span class="string">               </span>|<span class="string">               </span>|<span class="string">  .  </span>|<span class="string">               </span>|<span class="string">               </span>|</span><br><span class="line">|<span class="string">        ovn-controller         </span>|<span class="string">  .  </span>|<span class="string">        ovn-controller         </span>|</span><br><span class="line">|<span class="string">         </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string">  .  </span>|<span class="string">         </span>|<span class="string">          </span>|<span class="string">          </span>|</span><br><span class="line">|<span class="string">         </span>|<span class="string">          </span>|<span class="string">          </span>|<span class="string">     </span>|<span class="string">         </span>|<span class="string">          </span>|<span class="string">          </span>|</span><br><span class="line">|<span class="string">  ovs-vswitchd   ovsdb-server  </span>|<span class="string">     </span>|<span class="string">  ovs-vswitchd   ovsdb-server  </span>|</span><br><span class="line">|<span class="string">                               </span>|<span class="string">     </span>|<span class="string">                               </span>|</span><br><span class="line">+-------------------------------+     +-------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>主要组成部分包括</strong>：</p><ul><li>ovn northd，将 CMS 的北向配置转换为南向数据库的逻辑流。连接其上方的ovn Northbound 数据库和下方的 ovn Southbound数据库。它将传统网络概念中的逻辑网络配置（取自 OVN北向数据库）转换为其下方 OVN 南向数据库中的逻辑数据路径流。</li><li>ovn controller，一个在集群中的每个 Hypervisor 上的 OVNagent，北向连接 ovn-southbound 数据库。它将南向数据库中的逻辑流转换为OpenFlow for Open vSwitch。它还处理某些流量，例如 DHCP 和 DNS。</li><li>ovn nbctl，一个用于连接北向数据库的工具。</li><li>ovn sbctl，一个用于连接南向数据库的工具。</li><li>ovn northbound Database， 接收 OVN/CMS插件传递的逻辑网络配置的中间件。数据库模式意味着与 CMS中使用的概念匹配，它直接支持逻辑交换机、路由器、ACL等概念。</li><li>OVN Southbound Database，包含三种数据：指定如何到达 hypervisor和其他节点的物理网络（PN）表，用“逻辑数据路径流”描述逻辑网络的逻辑网络（LN）表，“”和将逻辑网络组件的位置链接到物理网络的绑定表。</li></ul><p>OVN 引入了两个全新的 OVSDB，一个叫 NorthboundDB（北向数据库，NB），一个叫 SouthboundDB（南向数据库，SB）；两个库都可以导出远程接口，允许用户通过 OVSDB协议对数据库进行操作。</p><p>NB 存放的是我们定义的逻辑交换机、逻辑路由器之类的数据，我们可以通过ovn提供的命令行（ovn-nbctl）完成添加、删除、修改、查询等操作；当然可以写代码通过OVSDB 协议完成类似动作。OVN 的 NB是面向“上层应用”的或者叫“云管平台（Cloud Management System，CMS）”。</p><p>SB 进程比较特殊它同时接受两边的“写入”，首先是运行在 ovn-host 上的ovn-controller 启动之后会去主动连接到 ovn-central 节点上的 SB进程，把自己的 IP 地址（Chassis），本机的 OVS状态（Datapath_Binding）写入到 SB 数据库中。ovn-controller 还“监听” SB数据库中流表的变化（Flow）去更新本地的 OVS 数据库 -- 流表下发。</p><p>SB 中的流表是由运行在 ovn-central 节点上的 ovn-northd进程修改的，ovn-northd 会“监听” NB的改变，把逻辑交换机、路由器的定义转换成流表（Flow）写入到 SB数据库。</p><p>整个架构非常简单，OVN仅仅提供了一组网络模型（逻辑交换机、逻辑路由器等），提供了一个OVSDB数据库用来存放这些模型同时把数据库的访问权限开放给最终用户，让最终用户通过OVSDB 协议来直接“写入”这些模型（北向）。通过一个叫 ovn-northd的进程把网络模型转换成流表，放入另一个数据库让 ovn-host自己来“取”流表（南向），以此完成流表下发。</p><h1 id="ovn-应用">OVN 应用</h1><h2 id="ovn-信息流">OVN 信息流</h2><h3 id="配置数据">配置数据</h3><p>OVN 中的配置数据从北向南传递，CMS 使用其 OVN/CMS 插件通过 northbound数据库传递 ovn 的逻辑网络配置给 ovn−northd，反过来，ovn−northd将配置编译为较低级别的形式，并通过 southbound 数据库将其传递给所有chassis；</p><h3 id="状态信息">状态信息</h3><p>ovn 中的状态信息从南向北传递。OVN 目前只提供几种形式的状态信息。</p><p>首先，ovn−northd 填充 northbound Logical_Switch_Port 表中的 up表项，如果 southbound port_Binding 表中逻辑端口的 chassis column为空，则设置为true，这允许CMS检测VM的网络何时出现。</p><p>第二，OVN 向 CMS 反馈其配置的实现情况，配置是否生效，该功能需要 CMS参与一个序列号协议，工作方式如下： - 当 CMS更新北向数据库中的配置时，作为同一事务的一部分，它会增加 NB_Global 表中nb_cfg 列的值。 - 当 ovn−northd根据北向数据库的给定快照更新南向数据库，它将 nb_cfg 从北行 nb_Global复制到南向数据库 SB_Global 表中，作为同一事务的一部分。 - 在 ovn−northd从南向数据库收到其更改已提交的确认，它将 northbound nb_Global 表中的sb_cfg 更新为 NB_cfg 版本。 - ovn−controller 进程接收更新的 southbound数据库和更新的 nb_cfg。此过程反过来会更新 Chassis 的 Open vSwitch实例中的物理流。当它收到 Open vSwitch 的确认时，物理流更新后，它会在southbound 数据库中自己的机箱记录中更新 nb_cfg。 - ovn−northd 监视southbound 数据库中所有 Chassis 记录中的 nb_cfg列。它跟踪所有记录中的最小值，并将其复制到北行 NB_Global 的 hv_cfg列中。</p><h2 id="chassis-设置">Chassis 设置</h2><p>OVN 部署中的每个 Chassis 必须配置一个专用于 OVN 使用的 openvSwitch网桥，称为集成网桥。系统启动脚本可能会在启动 ovn-controller之前创建此网桥。如果 ovn-controller启动时不存在此网桥，将使用下面建议的默认配置自动创建它。集成桥上的端口包括：- 在任何 Chassis 上，OVN 用于维护逻辑网络连接的隧道端口。ovn−controller添加、更新和删除这些隧道端口。 - openvswitch 本身存在的与 hypervisor之间的集成工作。 -在网关上，用于逻辑网络连接的物理端口。系统启动脚本在启动 ovn之前将此端口添加到ovn−controller。在更复杂的设置中，它可以是另一个网桥的 patch端口，而不是物理端口。</p><h2 id="逻辑网络">逻辑网络</h2><p>OVN 中的逻辑网络概念包括逻辑交换机和逻辑路由器，分别是以太网交换机和IP路由器的逻辑版本。就像物理实现一样，逻辑交换机和路由器可以连接到复杂的拓扑结构中。逻辑交换机和路由器通常是纯逻辑实体，也就是说，它们不关联或绑定到任何物理位置，并且在参与OVN 的每个 Hypervisor 中以分布式方式实现。</p>]]></content>
      
      
      <categories>
          
          <category> OVN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OVN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致橡树</title>
      <link href="/2022/08/26/%E8%87%B4%E6%A9%A1%E6%A0%91/"/>
      <url>/2022/08/26/%E8%87%B4%E6%A9%A1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>我如果爱你， 绝不像攀援的凌霄花， 借你的高枝炫耀自己； 我如果爱你，绝不学痴情的鸟儿， 为绿荫重复单调的歌曲； 也不止像泉源，常年送来清凉的慰藉； 也不止像险峰， 增加你的高度，衬托你的威仪。甚至日光， 甚至春雨。</p><span id="more"></span><p>不，这些都还不够！ 我必须是你近旁的一株木棉，作为树的形象和你站在一起。 根，紧握在地下； 叶，相触在云里。每一阵风过， 我们都互相致意， 但没有人， 听懂我们的言语。你有你的铜枝铁干， 像刀，像剑，也像戟； 我有我红硕的花朵，像沉重的叹息， 又像英勇的火炬。</p><p>我们分担寒潮、风雷、霹雳； 我们共享雾霭、流岚、虹霓。 仿佛永远分离，却又终身相依。 这才是伟大的爱情， 坚贞就在这里： 爱——不仅爱你伟岸的身躯， 也爱你坚持的位置， 足下的土地。</p>]]></content>
      
      
      <categories>
          
          <category> Home </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Home </tag>
            
            <tag> Liuhan </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
